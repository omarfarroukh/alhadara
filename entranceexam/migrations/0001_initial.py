# Generated by Django 5.2.3 on 2025-08-09 09:38

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('english', 'English'), ('german', 'German'), ('french', 'French'), ('spanish', 'Spanish')], max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LanguageLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('a1', 'A1 - Beginner'), ('a2', 'A2 - Elementary'), ('b1', 'B1 - Intermediate'), ('b2', 'B2 - Upper Intermediate'), ('c1', 'C1 - Advanced'), ('c2', 'C2 - Proficiency')], max_length=2, unique=True)),
                ('min_score', models.PositiveIntegerField(help_text='Minimum percentage score required for this level', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_score', models.PositiveIntegerField(help_text='Maximum percentage score for this level', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
            options={
                'ordering': ['min_score'],
            },
        ),
        migrations.CreateModel(
            name='EntranceExam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('mcq_time_limit_minutes', models.PositiveIntegerField(default=60, help_text='Time limit for MCQ/TF section in minutes')),
                ('mcq_total_points', models.PositiveIntegerField(default=100, help_text='Total points for MCQ/TF section')),
                ('speaking_total_points', models.PositiveIntegerField(default=100, help_text='Total points for speaking section')),
                ('writing_total_points', models.PositiveIntegerField(default=100, help_text='Total points for writing section')),
                ('is_active', models.BooleanField(default=True)),
                ('qr_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grading_teacher', models.ForeignKey(limit_choices_to={'user_type': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='grading_exams', to=settings.AUTH_USER_MODEL)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='entranceexam.language')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('mcq_completed_at', models.DateTimeField(blank=True, null=True)),
                ('speaking_completed_at', models.DateTimeField(blank=True, null=True)),
                ('writing_completed_at', models.DateTimeField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('mcq_in_progress', 'MCQ Section In Progress'), ('mcq_completed', 'MCQ Section Completed'), ('speaking_pending', 'Speaking Section Pending'), ('speaking_completed', 'Speaking Section Completed'), ('writing_pending', 'Writing Section Pending'), ('writing_completed', 'Writing Section Completed'), ('fully_completed', 'Fully Completed'), ('graded', 'Graded')], default='mcq_in_progress', max_length=20)),
                ('mcq_score', models.PositiveIntegerField(default=0, help_text='Points earned in MCQ section')),
                ('speaking_score', models.PositiveIntegerField(default=0, help_text='Points earned in speaking section')),
                ('writing_score', models.PositiveIntegerField(default=0, help_text='Points earned in writing section')),
                ('total_score', models.PositiveIntegerField(default=0)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Final percentage score', max_digits=5, null=True)),
                ('speaking_notes', models.TextField(blank=True, help_text="Teacher's notes for speaking section")),
                ('writing_notes', models.TextField(blank=True, help_text="Teacher's notes for writing section")),
                ('general_feedback', models.TextField(blank=True, help_text='General feedback for student')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='entranceexam.entranceexam')),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='entrance_exam_attempts', to=settings.AUTH_USER_MODEL)),
                ('achieved_level', models.ForeignKey(blank=True, help_text='Language level achieved', null=True, on_delete=django.db.models.deletion.SET_NULL, to='entranceexam.languagelevel')),
            ],
            options={
                'ordering': ['-started_at'],
                'unique_together': {('exam', 'student')},
            },
        ),
        migrations.CreateModel(
            name='ExamQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False')], max_length=20)),
                ('points', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('order', models.PositiveIntegerField(default=0)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='entranceexam.entranceexam')),
            ],
            options={
                'ordering': ['order', 'id'],
                'unique_together': {('exam', 'order')},
            },
        ),
        migrations.CreateModel(
            name='ExamChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=500)),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='entranceexam.examquestion')),
            ],
            options={
                'ordering': ['order', 'id'],
                'unique_together': {('question', 'order')},
            },
        ),
        migrations.CreateModel(
            name='ExamAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='entranceexam.examattempt')),
                ('selected_choices', models.ManyToManyField(blank=True, to='entranceexam.examchoice')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entranceexam.examquestion')),
            ],
            options={
                'unique_together': {('attempt', 'question')},
            },
        ),
    ]
